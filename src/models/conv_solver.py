from __future__ import division
from sympy import *
from sympy import solve, Symbol, Matrix, solve_linear_system, solve_undetermined_coeffs, nsolve, solve_poly_system
from scipy import signal
import numpy as np

np.set_printoptions(precision=5, linewidth=400, suppress=True)

inp = np.array([[.3, .7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [.5, .1, .3, .2, .5, 0, 0, 0, 0, 0, 0, .2, 0],
             [0, 0, .2, .1, .7, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, .2, 0, 0],
             [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0],
             [0, 0, .2, 0, 1, 1, 1, 1, 1, 1, 0, 0, .2],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, .2, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])

inp = np.random.rand(10, 10)
print("inp")
print(inp)
print()

filter_5x5 = [[0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0],
              [1, 1, 1, 0, 0],
              [0, 0, 1, 0, 0],
              [0, 0, 1, 0, 0]]

# filter_2 = [[0., 0., 0.],
#             [1., 1., 0.],
#             [-1, 1., 0.]]
#
# y = signal.correlate2d(inp, filter_5x5, mode='valid')
# print("y")
# print(y)
# print()
#
# # # first filter, find the middle results
# # test_output = [[0.2, 0.4, 2.95, 2.6, 0.85, 1.0, 1.5, 1.0, -0.7],
# #                [0.0, 0.0, 3.0, 3.5, 2.5, 2.5, 4.5, 5.0, 1.2],
# #                [0.0, 0.0, 3.0, 2.5, 1.0, 0.5, 1.5, 4.0, 1.5],
# #                [0.1, -0.1, 3.0, 3.0, 0.0, -0.5, 1.5, 2.5, 0.5],
# #                [0.3, 0.0, 2.4, 4.0, 3.0, 1.5, 2.0, 3.5, 1.5],
# #                [0.2, 0.3, 1.1, 2.5, 3.0, 3.0, 3.0, 3.1, 1.9],
# #                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3, 0.0]]
# #
# # X1 = signal.correlate2d(inp, filter_2, mode='valid')
#
#
# def x1(i, j, w_00, w_01, w_02, w_10, w_11, w_12, w_20, w_21, w_22):
#     return (inp[i+0][j+0]*w_00 + inp[i+0][j+1]*w_01 + inp[i+0][j+2]*w_02 +
#             inp[i+1][j+0]*w_10 + inp[i+1][j+1]*w_11 + inp[i+1][j+2]*w_12 +
#             inp[i+2][j+0]*w_20 + inp[i+2][j+1]*w_21 + inp[i+2][j+2]*w_22)
#
#
# w0_00, w0_01, w0_02 = Symbol("w0_00"), Symbol("w0_01"), Symbol("w0_02")
# w0_10, w0_11, w0_12 = Symbol("w0_10"), Symbol("w0_11"), Symbol("w0_12")
# w0_20, w0_21, w0_22 = Symbol("w0_20"), Symbol("w0_21"), Symbol("w0_22")
#
# w1_00, w1_01, w1_02 = Symbol("w1_00"), Symbol("w1_01"), Symbol("w1_02")
# w1_10, w1_11, w1_12 = Symbol("w1_10"), Symbol("w1_11"), Symbol("w1_12")
# w1_20, w1_21, w1_22 = Symbol("w1_20"), Symbol("w1_21"), Symbol("w1_22")
#
# f_00 = w1_00 * x1(w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# f_01 = w1_01 * x1(w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# f_02 = w1_02 * x1(w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# f_10 = w1_10 * x1(w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# f_11 = w1_11 * x1(w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# f_12 = w1_12 * x1(w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# f_20 = w1_20 * x1(w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# f_21 = w1_21 * x1(w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# f_22 = w1_22 * x1(w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
#
# # f_30 = w1_00 * x1(3, 0, w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# # f_31 = w1_01 * x1(3, 1, w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# # f_32 = w1_02 * x1(3, 2, w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# # f_40 = w1_10 * x1(4, 0, w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# # f_41 = w1_11 * x1(4, 1, w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# # f_42 = w1_12 * x1(4, 2, w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# # f_50 = w1_20 * x1(5, 0, w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# # f_51 = w1_21 * x1(5, 1, w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
# # f_52 = w1_22 * x1(5, 2, w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22)
#
# # res = nsolve((f_00, f_01, f_02, f_10, f_11, f_12, f_20, f_21, f_22, f_30, f_31, f_32, f_40, f_41, f_42, f_50, f_51, f_52),
# #              (w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22, w1_00, w1_01, w1_02, w1_10, w1_11, w1_12, w1_20, w1_21, w1_22),
# #              (y[0][0], y[0][1], y[0][2], y[1][0], y[1][1], y[1][2], y[2][0], y[2][1], y[2][2], y[3][0], y[3][1], y[3][2], y[4][0], y[4][1], y[4][2], y[5][0], y[5][1], y[5][2]),
# #              )
#
# # res = solve_poly_system([f_00, f_01, f_02, f_10, f_11, f_12, f_20, f_21, f_22, f_30, f_31, f_32, f_40, f_41, f_42, f_50, f_51, f_52],
# #              w0_00, w0_01, w0_02, w0_10, w0_11, w0_12, w0_20, w0_21, w0_22, w1_00, w1_01, w1_02, w1_10, w1_11, w1_12, w1_20, w1_21, w1_22)
#
# system = Matrix((
#     (inp[0,0], inp[0,1], inp[0,2], inp[1,0], inp[1,1], inp[1,2], inp[2,0], inp[1,1], inp[2,2], y[0,0]),
#     (inp[0,1], inp[0,2], inp[0,3], inp[1,1], inp[1,2], inp[1,3], inp[2,1], inp[1,2], inp[2,3], y[0,1]),
#     (inp[0,2], inp[0,3], inp[0,4], inp[1,2], inp[1,3], inp[1,4], inp[2,2], inp[1,3], inp[2,4], y[0,2]),
#     (inp[1,0], inp[1,1], inp[1,2], inp[2,0], inp[2,1], inp[2,2], inp[3,0], inp[3,1], inp[3,2], y[1,0]),
#     (inp[1,1], inp[1,2], inp[1,3], inp[2,1], inp[2,2], inp[2,3], inp[3,1], inp[3,2], inp[3,3], y[1,1]),
#     (inp[1,2], inp[1,3], inp[1,4], inp[2,2], inp[2,3], inp[2,4], inp[3,2], inp[3,3], inp[3,4], y[1,2]),
#     (inp[2,0], inp[2,1], inp[2,2], inp[3,0], inp[3,1], inp[3,2], inp[4,0], inp[4,1], inp[4,2], y[2,0]),
#     (inp[2,1], inp[2,2], inp[2,3], inp[3,1], inp[3,2], inp[3,3], inp[4,1], inp[4,2], inp[4,3], y[2,1]),
#     (inp[2,2], inp[2,3], inp[2,4], inp[3,2], inp[3,3], inp[3,4], inp[4,2], inp[4,3], inp[4,4], y[2,2])))
#
# res = solve_linear_system(system, f_00, f_01, f_02, f_10, f_11, f_12, f_20, f_21, f_22)
#
# print(res)
# # print("w0")
# # w0 = np.zeros((3, 3))
# # w0[0, 0] = res[0]
# # w0[0, 1] = res[1]
# # w0[0, 2] = res[2]
# # w0[1, 0] = res[3]
# # w0[1, 1] = res[4]
# # w0[1, 2] = res[5]
# # w0[2, 0] = res[6]
# # w0[2, 1] = res[7]
# # w0[2, 2] = res[8]
# # print(w0)
# #
# # print("w1")
# # w1 = np.zeros((3, 3))
# # w1[0, 0] = res[9]
# # w1[0, 1] = res[10]
# # w1[0, 2] = res[11]
# # w1[1, 0] = res[12]
# # w1[1, 1] = res[13]
# # w1[1, 2] = res[14]
# # w1[2, 0] = res[15]
# # w1[2, 1] = res[16]
# # w1[2, 2] = res[17]
# # print(w1)


x1_00 = w0_00 * inp[0,0] +